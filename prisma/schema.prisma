generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  NormanUser
}

model User {
  id                String     @id @default(cuid())
  name              String?
  email             String     @unique
  emailVerified     DateTime?
  role              Role       @default(NormanUser)
  image             String?
  accounts          Account[]
  sessions          Session[]
  TripItineraryPlan TripPlan[]
  freePlanUsed      Int        @default(0)
  balance           Int        @default(0)
  balanceUsed       Int        @default(0)
  totalBalanceUsed  Int        @default(0)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  Receipt           Receipt[]
  feedback          Feedback[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model TripPlan {
  id                     String   @id @default(cuid())
  destination            String
  duration               String
  tripName               String
  tripDescription        String
  timeToRead             String
  averageBudgetPerPerson String
  travelTips             Json
  // weatherForcast         String
  localCuisines          Json
  emergencyContacts      Json
  culturalEtiquette      String
  photographySpots       Json
  hotelDetails           Json // This will store your hotel details JSON
  itineraryPlan          Json // This will store your itinerary plan JSON
  createdAt              DateTime @default(now())
  userId                 String   @map("user_id")
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  slug                   String   @unique
  isDeleted              Boolean  @default(false)

  @@map("TripPlan")
}

// model Subscription {
//   id           String   @id @unique @default(cuid())
//   freePlanUsed Int
//   isSubscribed Boolean
//   userId       String
//   createdAt    DateTime @default(now())
//   // user         User     @relation(fields: [userId], references: [id])
//   balance      Int      @default(0)
// }

model Receipt {
  id              String   @id @unique @default(cuid())
  userId          String
  orderId         String
  paymentId       String
  amount          Int
  status          String
  paymentMode     String
  transactionTime DateTime
  createdAt       DateTime @default(now())
  user            User     @relation(references: [id], fields: [userId])
}

model Feedback {
  id        String         @id @default(cuid())
  userId    String?
  message   String
  type      FeedbackType   @default(GENERAL)
  status    FeedbackStatus @default(OPEN)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  user User? @relation(fields: [userId], references: [id])
}

enum FeedbackType {
  GENERAL
  BUG
  FEATURE_REQUEST
}

enum FeedbackStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
}
