generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  itineraryplans ItineraryPlan[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum InterestAndActivity {
  SIGHTSEEING
  ADVENTURE
  NATURE_AND_WILDLIFE
  CULTURAL_EXPERIENCES
  RELAXATION
  WATER_ACTIVITIES
  SHOPPING_AND_ENTERTAINMENT
  FOOD_AND_DRINK
  SPORTS_AND_FITNESS
  PHOTOGRAPHY
}

model ItineraryPlan {
  id                String                @id @default(cuid())
  destination       String
  startDate         DateTime
  endDate           DateTime
  numberOfTravelers Int
  includesChildren  Boolean
  includesElderly   Boolean
  accommodation     String
  interests         InterestAndActivity[]
  activities        String
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  userId            String
  user              User                  @relation(fields: [userId], references: [id])

  @@map("itinerary_plans")
}

// model Activity {
//   id               String                 @id @default(cuid())
//   name             String
//   type             InterestAndActivity
//   description      String?
//   itineraryPlanId  Int
//   itineraryPlan    ItineraryPlan       @relation(fields: [itineraryPlanId], references: [id])

//   @@map("activities")
// }
